---
layout: layouts/home.njk
eleventyNavigation:
  key: Form
  order: 5
---
<h1>Form</h1>
<form name="contact" method="POST" data-netlify="true" class="row g-3 needs-validation" novalidate>
  <div class="mb-3">
    <label for="firstName" class="form-label">First Name*</label>
    <input type="name" class="form-control" id="firstName" required>
    <div class="invalid-feedback">
      Please provide your name.
    </div>
  </div>
  <div class="mb-3">
    <label for="surname" class="form-label">Surname*</label>
    <input type="name" class="form-control" id="surname" required>
    <div class="invalid-feedback">
      Please provide your name.
    </div>
  </div>
  <div class="mb-3">
    <label for="email" class="form-label">Email address*</label>
    <input type="email" class="form-control" id="email" aria-describedby="emailHelp" pattern="@" required>
    <div id="emailHelp">We'll never share your email with anyone else.</div>
    <div class="invalid-feedback">
      Please provide a valid email address.
    </div>
  </div>
  <div class="mb-3">
    <label for="password" class="form-label">Password*</label>
    <input type="password" class="form-control" id="password" minlength="8" required>
    <div>Password must be 8 characters minimum.</div>
    <div class="invalid-feedback">
      Please provide a valid password.
    </div>
  </div>
  <div class="mb-3">
    <label for="message" class="form-label">Message</label>
    <textarea class=form-control id="message"></textarea>
  </div>
  <div class="col-12">
    <div class="form-check">
      <input class="form-check-input" type="checkbox" value="" id="invalidCheck" required>
      <label class="form-check-label" for="invalidCheck">
        Agree to terms and conditions
      </label>
      <div class="invalid-feedback">
        You must agree before submitting.
      </div>
    </div>
  </div>
  <div class="col-12">
    <button class="btn btn-primary" type="submit">Submit form</button>
  </div>
</form>
<script>
  /*
  //get default border colours (to use on input when validation passes)
  var borderStylePass = document.querySelector('#name').style.border;
  //set fail border colours (to use on input when validation fails)
  var borderStyleFail = '1px solid red';
  //get the form submit button
  var submit_button = document.querySelector('.form_submit');
  //attach form event listener
  submit_button.addEventListener(
    'click',
    function (event) {
      //get the form "firstName" elemement
      var firstname = document.querySelector('#firstName');
      //get the form "surname" elemement
      var surname = document.querySelector('#surname');
      //get the form "email" element
      var email = document.querySelector('#email');
      //get the form "password" element
      var password = document.querySelector('#password');
      //get the form "message" element
      var message = document.querySelector('#message');
      //all validation is assumed to be passed until tested
      blnValidated = true;
      //change the border as it the validation passed
      firstName.style.border = borderStylePass;
      email.style.border = borderStyleFail;
      //if validation fails change the bln to false and change the input border colour
      if (!firstName.value) {
        blnValidated = false;
        firstName.style.border = borderStyleFail;
      }
      if (!surname.value) {
        blnValidated = false;
        surname.style.border = borderStyleFail;
      }      
      if (!email.value) {
        blnValidated = false;
        email.style.border = borderStyleFail;
      }
      if (!password.value) {
        blnValidated = false;
        password.style.border = borderStyleFail;
      }
      //if validation failed do not allow the form to submit the data
      if (!blnValidated) {
        event.preventDefault();
      }
    },
    false
  );*/
// Example starter JavaScript for disabling form submissions if there are invalid fields
(() => {
  'use strict'

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  const forms = document.querySelectorAll('.needs-validation')

  // Loop over them and prevent submission
  Array.from(forms).forEach(form => {
    form.addEventListener('submit', event => {
      if (!form.checkValidity()) {
        event.preventDefault()
        event.stopPropagation()
      }

      form.classList.add('was-validated')
    }, false)
  })
})()
</script>